# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `filterrific` gem.
# Please instead update this file by running `bin/tapioca gem filterrific`.


class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::Filterrific::ActiveRecordExtension
end

# Adds reset_filterrific_url to controllers and views
#
# source://filterrific//lib/filterrific/version.rb#1
module Filterrific
  class << self
    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end
  end
end

# source://filterrific//lib/filterrific/action_controller_extension.rb#5
module Filterrific::ActionControllerExtension
  include ::Filterrific::HasResetFilterrificUrlMixin

  protected

  # Computes a default persistence id based on controller and action name
  #
  # source://filterrific//lib/filterrific/action_controller_extension.rb#55
  def compute_default_persistence_id; end

  # Computes filterrific params using a number of strategies. Limits params
  # to 'available_filters' if given via opts.
  #
  # @option opts
  # @param model_class [ActiveRecord::Base]
  # @param filterrific_params [ActionController::Params, Hash]
  # @param opts [Hash]
  # @param persistence_id [String, nil]
  #
  # source://filterrific//lib/filterrific/action_controller_extension.rb#68
  def compute_filterrific_params(model_class, filterrific_params, opts, persistence_id); end

  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param model_class [Class]
  # @param filterrific_params [ActionController::Params, Hash] typically the
  #   Rails request params under the :filterrific key (params[:filterrific]),
  #   however can be any Hash.
  # @param opts [Hash, optional]
  # @return [Filterrific::ParamSet]
  #
  # source://filterrific//lib/filterrific/action_controller_extension.rb#31
  def initialize_filterrific(model_class, filterrific_params, opts = T.unsafe(nil)); end

  # Sanitizes value to prevent xss attack.
  # Uses Rails ActionView::Helpers::SanitizeHelper.
  #
  # @param val [Object] the value to sanitize. Can be any kind of object. Collections
  #   will have their members sanitized recursively.
  #
  # source://filterrific//lib/filterrific/action_controller_extension.rb#88
  def sanitize_filterrific_param(val); end
end

# source://filterrific//lib/filterrific/action_view_extension.rb#5
module Filterrific::ActionViewExtension
  include ::Filterrific::HasResetFilterrificUrlMixin

  # Renders a link which indicates the current sorting and which can be used to
  # toggle the list sorting (set column and direction).
  #
  # NOTE: Make sure that this is used in the list partial that is re-rendered
  # when the filterrific params are changed, so that the filterrific params in
  # the URL are always current.
  #
  # NOTE: Currently the filterrific_sorting_link is not synchronized with a
  # SELECT input you may have in the filter form for sorting. We recommend you
  # use one or the other to avoid conflicting sort settings in the UI.
  #
  # @param filterrific [Filterrific::ParamSet] the current filterrific instance
  # @param sort_key [String, Symbol] the key to sort by, without direction.
  #   Example: 'name', 'created_at'
  # @param opts [Hash, optional]
  #
  # source://filterrific//lib/filterrific/action_view_extension.rb#64
  def filterrific_sorting_link(filterrific, sort_key, opts = T.unsafe(nil)); end

  # Sets all options on form_for to defaults that work with Filterrific
  #
  # @param record [Filterrific] the @filterrific object
  # @param options [Hash] standard options for form_for
  # @param block [Proc] the form body
  #
  # source://filterrific//lib/filterrific/action_view_extension.rb#12
  def form_for_filterrific(record, options = T.unsafe(nil), &block); end

  # Renders a spinner while the list is being updated
  #
  # source://filterrific//lib/filterrific/action_view_extension.rb#25
  def render_filterrific_spinner; end

  protected

  # Renders HTML to sort by a new column.
  #
  # @param filterrific [Filterrific::ParamSet]
  # @param new_sort_key [String]
  # @param opts [Hash]
  # @return [String] an HTML fragment
  #
  # source://filterrific//lib/filterrific/action_view_extension.rb#129
  def filterrific_sorting_link_new_column(filterrific, new_sort_key, opts); end

  # Renders HTML to reverse sort order on currently sorted column.
  #
  # @param filterrific [Filterrific::ParamSet]
  # @param new_sort_key [String]
  # @param opts [Hash]
  # @return [String] an HTML fragment
  #
  # source://filterrific//lib/filterrific/action_view_extension.rb#105
  def filterrific_sorting_link_reverse_order(filterrific, new_sort_key, opts); end
end

# source://filterrific//lib/filterrific/active_record_extension.rb#7
module Filterrific::ActiveRecordExtension
  # Adds Filterrific behavior to class when called like so:
  #
  # filterrific(
  #   :available_filters => [:sorted_by, :search_query, :with_state]
  #   :default_filter_params => { :sorted_by => "created_at_asc" },
  # )
  #
  # @option opts
  # @option opts
  # @param opts [Hash] a customizable set of options
  # @return [void]
  #
  # source://filterrific//lib/filterrific/active_record_extension.rb#19
  def filterrific(opts); end

  # Returns ActiveRecord relation based on filterrific_param_set.
  # Use like so: `ModelClass.filterrific_find(@filterrific)`
  #
  # @param filterrific_param_set [Filterrific::ParamSet]
  # @return [ActiveRecord::Relation] with filters applied
  #
  # source://filterrific//lib/filterrific/active_record_extension.rb#42
  def filterrific_find(filterrific_param_set); end

  protected

  # Assigns available filters.
  #
  # @param opts [Hash] the complete options hash passed to `filterrific`.
  #   This method uses the 'available_filters', 'sorted_by', and 'search_query' keys.
  # @return [void]
  #
  # source://filterrific//lib/filterrific/active_record_extension.rb#81
  def assign_filterrific_available_filters(opts); end

  # source://filterrific//lib/filterrific/active_record_extension.rb#95
  def assign_filterrific_default_filter_params(opts); end

  # Validates presence of at least one available filter.
  #
  # @return [void]
  #
  # source://filterrific//lib/filterrific/active_record_extension.rb#89
  def validate_filterrific_available_filters; end

  # source://filterrific//lib/filterrific/active_record_extension.rb#101
  def validate_filterrific_default_filter_params; end
end

# source://filterrific//lib/filterrific/engine.rb#10
class Filterrific::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://filterrific//lib/filterrific/has_reset_filterrific_url_mixin.rb#5
module Filterrific::HasResetFilterrificUrlMixin
  # Returns a url that can be used to reset the Filterrific params
  #
  # source://filterrific//lib/filterrific/has_reset_filterrific_url_mixin.rb#7
  def reset_filterrific_url(opts = T.unsafe(nil)); end
end

# FilterParamSet is a container to store FilterParams
#
# source://filterrific//lib/filterrific/param_set.rb#6
class Filterrific::ParamSet
  # Initializes a new Filterrific::ParamSet. This is the core of Filterrific
  # where all the action happens.
  #
  # @param a_model_class [Class] the class you want to filter records of.
  # @param filterrific_params [Hash, optional] the filter params, falls back
  #   to model_class' default_settings.
  # @return [Filterrific::ParamSet]
  #
  # source://filterrific//lib/filterrific/param_set.rb#16
  def initialize(a_model_class, filterrific_params = T.unsafe(nil)); end

  # A shortcut to run the ActiveRecord query on model_class. Use this if
  # you want to start with the model_class, and not an existing ActiveRecord::Relation.
  # Allows `@filterrific.find` in controller instead of
  # `ModelClass.filterrific_find(@filterrific)`
  #
  # source://filterrific//lib/filterrific/param_set.rb#50
  def find; end

  # Returns the value of attribute model_class.
  #
  # source://filterrific//lib/filterrific/param_set.rb#7
  def model_class; end

  # Sets the attribute model_class
  #
  # @param value the value to set the attribute model_class to.
  #
  # source://filterrific//lib/filterrific/param_set.rb#7
  def model_class=(_arg0); end

  # Returns the value of attribute select_options.
  #
  # source://filterrific//lib/filterrific/param_set.rb#8
  def select_options; end

  # Sets the attribute select_options
  #
  # @param value the value to set the attribute select_options to.
  #
  # source://filterrific//lib/filterrific/param_set.rb#8
  def select_options=(_arg0); end

  # Returns Filterrific::ParamSet as hash (used for URL params and serialization)
  #
  # @return [Hash] with stringified keys
  #
  # source://filterrific//lib/filterrific/param_set.rb#56
  def to_hash; end

  # Returns params as JSON string.
  #
  # @return [String]
  #
  # source://filterrific//lib/filterrific/param_set.rb#77
  def to_json; end

  protected

  # Conditions params: Evaluates Procs and type casts integer values.
  # @return[Hash] the conditioned params hash
  #
  # @param fp [Hash] the filterrific params hash
  #
  # source://filterrific//lib/filterrific/param_set.rb#86
  def condition_filterrific_params(fp); end

  # Defines attr accessors for each available_filter on self and assigns
  # values based on fp.
  #
  # @param fp [Hash] filterrific_params with stringified keys
  #
  # source://filterrific//lib/filterrific/param_set.rb#114
  def define_and_assign_attr_accessors_for_each_filter(fp); end

  # Regex to detect if str represents and int
  #
  # source://filterrific//lib/filterrific/param_set.rb#107
  def integer_detector_regex; end
end

# source://filterrific//lib/filterrific/version.rb#2
Filterrific::VERSION = T.let(T.unsafe(nil), String)
