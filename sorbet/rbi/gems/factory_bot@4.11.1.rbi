# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `factory_bot` gem.
# Please instead update this file by running `bin/tapioca gem factory_bot`.


# source://factory_bot//lib/factory_bot/definition_hierarchy.rb#1
module FactoryBot
  extend ::FactoryBot::Syntax::Methods
  extend ::FactoryBot::Syntax::Default

  class << self
    # Returns the value of attribute aliases.
    #
    # source://factory_bot//lib/factory_bot/aliases.rb#3
    def aliases; end

    # Sets the attribute aliases
    #
    # @param value the value to set the attribute aliases to.
    #
    # source://factory_bot//lib/factory_bot/aliases.rb#3
    def aliases=(_arg0); end

    # source://factory_bot//lib/factory_bot/aliases.rb#11
    def aliases_for(attribute); end

    # source://factory_bot//lib/factory_bot.rb#73
    def allow_class_lookup(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def allow_class_lookup=(arg); end

    # source://factory_bot//lib/factory_bot.rb#73
    def callback_names(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def callbacks(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#50
    def configuration; end

    # source://factory_bot//lib/factory_bot.rb#73
    def constructor(*_arg0, **_arg1, &_arg2); end

    # An Array of strings specifying locations that should be searched for
    # factory definitions. By default, factory_bot will attempt to require
    # "factories", "test/factories" and "spec/factories". Only the first
    # existing file will be loaded.
    #
    # source://factory_bot//lib/factory_bot/find_definitions.rb#7
    def definition_file_paths; end

    # An Array of strings specifying locations that should be searched for
    # factory definitions. By default, factory_bot will attempt to require
    # "factories", "test/factories" and "spec/factories". Only the first
    # existing file will be loaded.
    #
    # source://factory_bot//lib/factory_bot/find_definitions.rb#7
    def definition_file_paths=(_arg0); end

    # source://factory_bot//lib/factory_bot.rb#73
    def duplicate_attribute_assignment_from_initialize_with(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def duplicate_attribute_assignment_from_initialize_with=(arg); end

    # source://factory_bot//lib/factory_bot.rb#73
    def factories(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#99
    def factory_by_name(name); end

    # source://factory_bot//lib/factory_bot/find_definitions.rb#12
    def find_definitions; end

    # source://factory_bot//lib/factory_bot.rb#73
    def initialize_with(*_arg0, **_arg1, &_arg2); end

    # Look for errors in factories and (optionally) their traits.
    # Parameters:
    # factories - which factories to lint; omit for all factories
    # options:
    #   traits: true - to lint traits as well as factories
    #   strategy: :create - to specify the strategy for linting
    #
    # source://factory_bot//lib/factory_bot.rb#64
    def lint(*args); end

    # source://factory_bot//lib/factory_bot.rb#153
    def register_callback(name); end

    # source://factory_bot//lib/factory_bot.rb#146
    def register_default_callbacks; end

    # source://factory_bot//lib/factory_bot.rb#138
    def register_default_strategies; end

    # source://factory_bot//lib/factory_bot.rb#92
    def register_factory(factory); end

    # source://factory_bot//lib/factory_bot.rb#103
    def register_sequence(sequence); end

    # source://factory_bot//lib/factory_bot.rb#129
    def register_strategy(strategy_name, strategy_class); end

    # source://factory_bot//lib/factory_bot.rb#118
    def register_trait(trait); end

    # source://factory_bot//lib/factory_bot/reload.rb#2
    def reload; end

    # source://factory_bot//lib/factory_bot.rb#54
    def reset_configuration; end

    # source://factory_bot//lib/factory_bot.rb#114
    def rewind_sequences; end

    # source://factory_bot//lib/factory_bot.rb#110
    def sequence_by_name(name); end

    # source://factory_bot//lib/factory_bot.rb#73
    def sequences(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def skip_create(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def strategies(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#134
    def strategy_by_name(name); end

    # source://factory_bot//lib/factory_bot.rb#73
    def to_create(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#125
    def trait_by_name(name); end

    # source://factory_bot//lib/factory_bot.rb#73
    def traits(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def use_parent_strategy(*_arg0, **_arg1, &_arg2); end

    # source://factory_bot//lib/factory_bot.rb#73
    def use_parent_strategy=(arg); end
  end
end

# Raised when a factory is defined that attempts to instantiate itself.
#
# source://factory_bot//lib/factory_bot/errors.rb#3
class FactoryBot::AssociationDefinitionError < ::RuntimeError; end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute/static.rb#2
class FactoryBot::Attribute
  # @api private
  # @return [Attribute] a new instance of Attribute
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#11
  def initialize(name, ignored); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#25
  def alias_for?(attr); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#21
  def association?; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#9
  def ignored; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#9
  def name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#17
  def to_proc; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#31
  def ensure_non_attribute_writer!; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute/association.rb#4
class FactoryBot::Attribute::Association < ::FactoryBot::Attribute
  # @api private
  # @return [Association] a new instance of Association
  #
  # source://factory_bot//lib/factory_bot/attribute/association.rb#7
  def initialize(name, factory, overrides); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/attribute/association.rb#22
  def association?; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute/association.rb#5
  def factory; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute/association.rb#13
  def to_proc; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute/dynamic.rb#4
class FactoryBot::Attribute::Dynamic < ::FactoryBot::Attribute
  # @api private
  # @return [Dynamic] a new instance of Dynamic
  #
  # source://factory_bot//lib/factory_bot/attribute/dynamic.rb#5
  def initialize(name, ignored, block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute/dynamic.rb#10
  def to_proc; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute.rb#35
class FactoryBot::Attribute::NonAttributeWriterValidator
  # @api private
  # @return [NonAttributeWriterValidator] a new instance of NonAttributeWriterValidator
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#36
  def initialize(method_name); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#41
  def validate!; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#53
  def attribute_name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#57
  def error_message; end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/attribute.rb#49
  def method_is_writer?; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute/sequence.rb#4
class FactoryBot::Attribute::Sequence < ::FactoryBot::Attribute
  # @api private
  # @return [Sequence] a new instance of Sequence
  #
  # source://factory_bot//lib/factory_bot/attribute/sequence.rb#5
  def initialize(name, sequence, ignored); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute/sequence.rb#10
  def to_proc; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute/static.rb#4
class FactoryBot::Attribute::Static < ::FactoryBot::Attribute
  # @api private
  # @return [Static] a new instance of Static
  #
  # source://factory_bot//lib/factory_bot/attribute/static.rb#5
  def initialize(name, value, ignored); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute/static.rb#10
  def to_proc; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute_assigner.rb#3
class FactoryBot::AttributeAssigner
  # @api private
  # @return [AttributeAssigner] a new instance of AttributeAssigner
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#4
  def initialize(evaluator, build_class, &instance_builder); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#22
  def hash; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#12
  def object; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#91
  def alias_names_to_ignore; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#79
  def association_names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#67
  def attribute_names_to_assign; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#63
  def attributes_to_set_on_hash; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#59
  def attributes_to_set_on_instance; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#47
  def build_class_instance; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#51
  def build_hash; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#37
  def decorated_evaluator; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#55
  def get(attribute_name); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#87
  def hash_instance_methods_to_respond_to; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#75
  def ignored_attribute_names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#33
  def method_tracking_evaluator; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#43
  def methods_invoked_on_evaluator; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#71
  def non_ignored_attribute_names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_assigner.rb#83
  def override_names; end
end

# Raised when defining an invalid attribute:
# * Defining an attribute which has a name ending in "="
# * Defining an attribute with both a static and lazy value
# * Defining an attribute twice in the same factory
#
# source://factory_bot//lib/factory_bot/errors.rb#18
class FactoryBot::AttributeDefinitionError < ::RuntimeError; end

# @api private
#
# source://factory_bot//lib/factory_bot/attribute_list.rb#3
class FactoryBot::AttributeList
  include ::Enumerable

  # @api private
  # @return [AttributeList] a new instance of AttributeList
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#6
  def initialize(name = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#38
  def apply_attributes(attributes_to_apply); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#26
  def associations; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#11
  def define_attribute(attribute); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#18
  def each(&block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#30
  def ignored; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#22
  def names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#34
  def non_ignored; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#44
  def add_attribute(attribute); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#61
  def attribute_defined?(attribute_name); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#49
  def ensure_attribute_not_defined!(attribute); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/attribute_list.rb#55
  def ensure_attribute_not_self_referencing!(attribute); end
end

# source://factory_bot//lib/factory_bot/callback.rb#2
class FactoryBot::Callback
  # @return [Callback] a new instance of Callback
  #
  # source://factory_bot//lib/factory_bot/callback.rb#5
  def initialize(name, block); end

  # source://factory_bot//lib/factory_bot/callback.rb#19
  def ==(other); end

  # Returns the value of attribute name.
  #
  # source://factory_bot//lib/factory_bot/callback.rb#3
  def name; end

  # source://factory_bot//lib/factory_bot/callback.rb#11
  def run(instance, evaluator); end

  protected

  # Returns the value of attribute block.
  #
  # source://factory_bot//lib/factory_bot/callback.rb#25
  def block; end

  private

  # source://factory_bot//lib/factory_bot/callback.rb#29
  def ensure_valid_callback_name!; end

  # source://factory_bot//lib/factory_bot/callback.rb#36
  def syntax_runner; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/callbacks_observer.rb#3
class FactoryBot::CallbacksObserver
  # @api private
  # @return [CallbacksObserver] a new instance of CallbacksObserver
  #
  # source://factory_bot//lib/factory_bot/callbacks_observer.rb#4
  def initialize(callbacks, evaluator); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/callbacks_observer.rb#9
  def update(name, result_instance); end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/callbacks_observer.rb#17
  def callbacks_by_name(name); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/configuration.rb#3
class FactoryBot::Configuration
  # @api private
  # @return [Configuration] a new instance of Configuration
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#8
  def initialize; end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def after(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#6
  def allow_class_lookup; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#6
  def allow_class_lookup=(_arg0); end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def before(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def callback(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#4
  def callback_names; end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def callbacks(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def constructor(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#29
  def duplicate_attribute_assignment_from_initialize_with; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#33
  def duplicate_attribute_assignment_from_initialize_with=(value); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#4
  def factories; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#25
  def initialize_with(&block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#4
  def sequences; end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def skip_create(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#4
  def strategies; end

  # source://factory_bot//lib/factory_bot/configuration.rb#22
  def to_create(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#4
  def traits; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#6
  def use_parent_strategy; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/configuration.rb#6
  def use_parent_strategy=(_arg0); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration/static.rb#2
class FactoryBot::Declaration
  # @api private
  # @return [Declaration] a new instance of Declaration
  #
  # source://factory_bot//lib/factory_bot/declaration.rb#11
  def initialize(name, ignored = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration.rb#9
  def name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration.rb#16
  def to_attributes; end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration.rb#21
  def ignored; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration/association.rb#4
class FactoryBot::Declaration::Association < ::FactoryBot::Declaration
  # @api private
  # @return [Association] a new instance of Association
  #
  # source://factory_bot//lib/factory_bot/declaration/association.rb#5
  def initialize(name, *options); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/association.rb#12
  def ==(other); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/association.rb#18
  def options; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/association.rb#22
  def build; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration/dynamic.rb#4
class FactoryBot::Declaration::Dynamic < ::FactoryBot::Declaration
  # @api private
  # @return [Dynamic] a new instance of Dynamic
  #
  # source://factory_bot//lib/factory_bot/declaration/dynamic.rb#5
  def initialize(name, ignored = T.unsafe(nil), block = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/dynamic.rb#10
  def ==(other); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/dynamic.rb#17
  def block; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/dynamic.rb#21
  def build; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration/implicit.rb#4
class FactoryBot::Declaration::Implicit < ::FactoryBot::Declaration
  # @api private
  # @return [Implicit] a new instance of Implicit
  #
  # source://factory_bot//lib/factory_bot/declaration/implicit.rb#5
  def initialize(name, factory = T.unsafe(nil), ignored = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/implicit.rb#10
  def ==(other); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/implicit.rb#17
  def factory; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/implicit.rb#21
  def build; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration/static.rb#4
class FactoryBot::Declaration::Static < ::FactoryBot::Declaration
  # @api private
  # @return [Static] a new instance of Static
  #
  # source://factory_bot//lib/factory_bot/declaration/static.rb#5
  def initialize(name, value, ignored = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/static.rb#10
  def ==(other); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/static.rb#17
  def value; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration/static.rb#21
  def build; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/declaration_list.rb#3
class FactoryBot::DeclarationList
  include ::Enumerable

  # @api private
  # @return [DeclarationList] a new instance of DeclarationList
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#6
  def initialize(name = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#23
  def attributes; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#12
  def declare_attribute(declaration); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#31
  def each(&block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#19
  def overridable; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#37
  def delete_declaration(declaration); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#45
  def overridable?; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/declaration_list.rb#41
  def to_attributes; end
end

# source://factory_bot//lib/factory_bot/decorator.rb#2
class FactoryBot::Decorator < ::BasicObject
  # @return [Decorator] a new instance of Decorator
  #
  # source://factory_bot//lib/factory_bot/decorator.rb#5
  def initialize(component); end

  # source://factory_bot//lib/factory_bot/decorator.rb#9
  def method_missing(name, *args, &block); end

  # source://factory_bot//lib/factory_bot/decorator.rb#13
  def send(symbol, *args, &block); end

  class << self
    # source://factory_bot//lib/factory_bot/decorator.rb#17
    def const_missing(name); end
  end
end

# source://factory_bot//lib/factory_bot/decorator/attribute_hash.rb#3
class FactoryBot::Decorator::AttributeHash < ::FactoryBot::Decorator
  # @return [AttributeHash] a new instance of AttributeHash
  #
  # source://factory_bot//lib/factory_bot/decorator/attribute_hash.rb#4
  def initialize(component, attributes = T.unsafe(nil)); end

  # source://factory_bot//lib/factory_bot/decorator/attribute_hash.rb#9
  def attributes; end
end

# source://factory_bot//lib/factory_bot/decorator/class_key_hash.rb#3
class FactoryBot::Decorator::ClassKeyHash < ::FactoryBot::Decorator
  # source://factory_bot//lib/factory_bot/decorator/class_key_hash.rb#4
  def [](key); end

  # source://factory_bot//lib/factory_bot/decorator/class_key_hash.rb#8
  def []=(key, value); end

  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/decorator/class_key_hash.rb#12
  def key?(key); end

  private

  # source://factory_bot//lib/factory_bot/decorator/class_key_hash.rb#18
  def symbolized_key(key); end
end

# source://factory_bot//lib/factory_bot/decorator/disallows_duplicates_registry.rb#3
class FactoryBot::Decorator::DisallowsDuplicatesRegistry < ::FactoryBot::Decorator
  # source://factory_bot//lib/factory_bot/decorator/disallows_duplicates_registry.rb#4
  def register(name, item); end
end

# source://factory_bot//lib/factory_bot/decorator/invocation_tracker.rb#3
class FactoryBot::Decorator::InvocationTracker < ::FactoryBot::Decorator
  # @return [InvocationTracker] a new instance of InvocationTracker
  #
  # source://factory_bot//lib/factory_bot/decorator/invocation_tracker.rb#4
  def initialize(component); end

  # source://factory_bot//lib/factory_bot/decorator/invocation_tracker.rb#14
  def __invoked_methods__; end

  # source://factory_bot//lib/factory_bot/decorator/invocation_tracker.rb#9
  def method_missing(name, *args, &block); end
end

# source://factory_bot//lib/factory_bot/decorator/new_constructor.rb#3
class FactoryBot::Decorator::NewConstructor < ::FactoryBot::Decorator
  # @return [NewConstructor] a new instance of NewConstructor
  #
  # source://factory_bot//lib/factory_bot/decorator/new_constructor.rb#4
  def initialize(component, build_class); end

  # source://factory_bot//lib/factory_bot/decorator/new_constructor.rb#9
  def new(*_arg0, **_arg1, &_arg2); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/definition.rb#3
class FactoryBot::Definition
  # @api private
  # @return [Definition] a new instance of Definition
  #
  # source://factory_bot//lib/factory_bot/definition.rb#6
  def initialize(name = T.unsafe(nil), base_traits = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#71
  def add_callback(callback); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#91
  def after(*names, &block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#67
  def append_traits(new_traits); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#20
  def attributes; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#87
  def before(*names, &block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#95
  def callback(*names, &block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#41
  def callbacks; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#45
  def compile; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#37
  def constructor; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#4
  def declarations; end

  # source://factory_bot//lib/factory_bot/definition.rb#18
  def declare_attribute(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#83
  def define_constructor(&block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#79
  def define_trait(trait); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#4
  def defined_traits; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#63
  def inherit_traits(new_traits); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#58
  def overridable; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#75
  def skip_create; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#29
  def to_create(&block); end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#108
  def additional_traits; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#126
  def aggregate_from_traits_and_self(method_name, &block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#104
  def base_traits; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#120
  def initialize_copy(source); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#112
  def trait_by_name(name); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/definition.rb#116
  def trait_for(name); end
end

# source://factory_bot//lib/factory_bot/definition_hierarchy.rb#2
class FactoryBot::DefinitionHierarchy
  # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#3
  def callbacks; end

  # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#7
  def constructor; end

  # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#11
  def to_create; end

  class << self
    # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#15
    def build_from_definition(definition); end

    private

    # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#21
    def add_callbacks(callbacks); end

    # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#30
    def build_constructor(&block); end

    # source://factory_bot//lib/factory_bot/definition_hierarchy.rb#39
    def build_to_create(&block); end
  end
end

# source://factory_bot//lib/factory_bot/definition_proxy.rb#2
class FactoryBot::DefinitionProxy
  # @return [DefinitionProxy] a new instance of DefinitionProxy
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#13
  def initialize(definition, ignore = T.unsafe(nil)); end

  # Adds an attribute that should be assigned on generated instances for this
  # factory.
  #
  # This method should be called with either a value or block, but not both. If
  # called with a block, the attribute will be generated "lazily," whenever an
  # instance is generated. Lazy attribute blocks will not be called if that
  # attribute is overridden for a specific instance.
  #
  # When defining lazy attributes, an instance of FactoryBot::Strategy will
  # be yielded, allowing associations to be built using the correct build
  # strategy.
  #
  # Arguments:
  # * name: +Symbol+ or +String+
  #   The name of this attribute. This will be assigned using "name=" for
  #   generated instances.
  # * value: +Object+
  #   If no block is given, this value will be used for this attribute.
  #
  # @raise [AttributeDefinitionError]
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#42
  def add_attribute(name, value = T.unsafe(nil), &block); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#9
  def after(*_arg0, **_arg1, &_arg2); end

  # Adds an attribute that builds an association. The associated instance will
  # be built using the same build strategy as the parent instance.
  #
  # Example:
  #   factory :user do
  #     name 'Joey'
  #   end
  #
  #   factory :post do
  #     association :author, factory: :user
  #   end
  #
  # Arguments:
  # * name: +Symbol+
  #   The name of this attribute.
  # * options: +Hash+
  #
  # Options:
  # * factory: +Symbol+ or +String+
  #    The name of the factory to use when building the associated instance.
  #    If no name is given, the name of the attribute is assumed to be the
  #    name of the factory. For example, a "user" association will by
  #    default use the "user" factory.
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#151
  def association(name, *options); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#9
  def before(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#9
  def callback(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute child_factories.
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#11
  def child_factories; end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#163
  def factory(name, options = T.unsafe(nil), &block); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#55
  def ignore(&block); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#171
  def initialize_with(&block); end

  # Calls add_attribute using the missing method name as the name of the
  # attribute, so that:
  #
  #   factory :user do
  #     name 'Billy Idol'
  #   end
  #
  # and:
  #
  #   factory :user do
  #     add_attribute :name, 'Billy Idol'
  #   end
  #
  # are equivalent.
  #
  # If no argument or block is given, factory_bot will look for a sequence
  # or association with the same name. This means that:
  #
  #   factory :user do
  #     email { create(:email) }
  #     association :account
  #   end
  #
  # and:
  #
  #   factory :user do
  #     email
  #     account
  #   end
  #
  # are equivalent.
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#97
  def method_missing(name, *args, &block); end

  # Adds an attribute that will have unique values generated by a sequence with
  # a specified format.
  #
  # The result of:
  #   factory :user do
  #     sequence(:email) { |n| "person#{n}@example.com" }
  #   end
  #
  # Is equal to:
  #   sequence(:email) { |n| "person#{n}@example.com" }
  #
  #   factory :user do
  #     email { FactoryBot.generate(:email) }
  #   end
  #
  # Except that no globally available sequence will be defined.
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#123
  def sequence(name, *args, &block); end

  # @raise [FactoryBot::MethodDefinitionError]
  #
  # source://factory_bot//lib/factory_bot/definition_proxy.rb#19
  def singleton_method_added(name); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#159
  def skip_create; end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#155
  def to_create(&block); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#167
  def trait(name, &block); end

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#61
  def transient(&block); end

  private

  # source://factory_bot//lib/factory_bot/definition_proxy.rb#177
  def warn_static_attribute_deprecation(name, value); end
end

# source://factory_bot//lib/factory_bot/definition_proxy.rb#3
FactoryBot::DefinitionProxy::UNPROXIED_METHODS = T.let(T.unsafe(nil), Array)

# Raised when a factory is defined with the same name as a previously-defined factory.
#
# source://factory_bot//lib/factory_bot/errors.rb#9
class FactoryBot::DuplicateDefinitionError < ::RuntimeError; end

# source://factory_bot//lib/factory_bot/evaluation.rb#4
class FactoryBot::Evaluation
  include ::Observable

  # @return [Evaluation] a new instance of Evaluation
  #
  # source://factory_bot//lib/factory_bot/evaluation.rb#7
  def initialize(evaluator, attribute_assigner, to_create); end

  # source://factory_bot//lib/factory_bot/evaluation.rb#15
  def create(result_instance); end

  # source://factory_bot//lib/factory_bot/evaluation.rb#13
  def hash(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/evaluation.rb#22
  def notify(name, result_instance); end

  # source://factory_bot//lib/factory_bot/evaluation.rb#13
  def object(*_arg0, **_arg1, &_arg2); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/evaluator.rb#6
class FactoryBot::Evaluator
  # @api private
  # @return [Evaluator] a new instance of Evaluator
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#13
  def initialize(build_strategy, overrides = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#52
  def __override_names__; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#24
  def association(factory_name, *traits_and_overrides); end

  # source://factory_bot//lib/factory_bot/evaluator.rb#7
  def attribute_lists; end

  # source://factory_bot//lib/factory_bot/evaluator.rb#7
  def attribute_lists=(_arg0); end

  # source://factory_bot//lib/factory_bot/evaluator.rb#7
  def attribute_lists?; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#56
  def increment_sequence(sequence); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#36
  def instance=(object_instance); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#40
  def method_missing(method_name, *args, &block); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/evaluator.rb#48
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # @api private
    #
    # source://factory_bot//lib/factory_bot/evaluator.rb#60
    def attribute_list; end

    # source://factory_bot//lib/factory_bot/evaluator.rb#7
    def attribute_lists; end

    # source://factory_bot//lib/factory_bot/evaluator.rb#7
    def attribute_lists=(value); end

    # source://factory_bot//lib/factory_bot/evaluator.rb#7
    def attribute_lists?; end

    # @api private
    #
    # source://factory_bot//lib/factory_bot/evaluator.rb#68
    def define_attribute(name, &block); end
  end
end

# @api private
#
# source://factory_bot//lib/factory_bot/evaluator_class_definer.rb#3
class FactoryBot::EvaluatorClassDefiner
  # @api private
  # @return [EvaluatorClassDefiner] a new instance of EvaluatorClassDefiner
  #
  # source://factory_bot//lib/factory_bot/evaluator_class_definer.rb#4
  def initialize(attributes, parent_class); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/evaluator_class_definer.rb#13
  def evaluator_class; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/factory.rb#6
class FactoryBot::Factory
  # @api private
  # @return [Factory] a new instance of Factory
  #
  # source://factory_bot//lib/factory_bot/factory.rb#9
  def initialize(name, options = T.unsafe(nil)); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def add_callback(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def append_traits(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#50
  def associations; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#22
  def build_class; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#83
  def compile; end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def constructor(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def declare_attribute(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def define_trait(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def defined_traits(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#7
  def definition; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#46
  def human_names; end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def inherit_traits(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#7
  def name; end

  # Names for this factory, including aliases.
  #
  # Example:
  #
  #   factory :user, aliases: [:author] do
  #     # ...
  #   end
  #
  #   FactoryBot.create(:author).class
  #   # => User
  #
  # Because an attribute defined without a value or block will build an
  # association with the same name, this allows associations to be defined
  # without factories, such as:
  #
  #   factory :user, aliases: [:author] do
  #     # ...
  #   end
  #
  #   factory :post do
  #     author
  #   end
  #
  #   FactoryBot.create(:post).author.class
  #   # => User
  #
  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#79
  def names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#30
  def run(build_strategy, overrides, &block); end

  # source://factory_bot//lib/factory_bot/factory.rb#19
  def to_create(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#93
  def with_traits(traits); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#109
  def attributes; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#124
  def build_hierarchy; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#128
  def callbacks; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#101
  def class_name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#136
  def compiled_constructor; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#132
  def compiled_to_create; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#105
  def evaluator_class; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#116
  def hierarchy_class; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#120
  def hierarchy_instance; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#142
  def assert_valid_options(options); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#154
  def initialize_copy(source); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/factory.rb#146
  def parent; end
end

# source://factory_bot//lib/factory_bot/factory_runner.rb#2
class FactoryBot::FactoryRunner
  # @return [FactoryRunner] a new instance of FactoryRunner
  #
  # source://factory_bot//lib/factory_bot/factory_runner.rb#3
  def initialize(name, strategy, traits_and_overrides); end

  # source://factory_bot//lib/factory_bot/factory_runner.rb#11
  def run(runner_strategy = T.unsafe(nil), &block); end
end

# Raised when a callback is defined that has an invalid name
#
# source://factory_bot//lib/factory_bot/errors.rb#6
class FactoryBot::InvalidCallbackNameError < ::RuntimeError; end

# Raised when any factory is considered invalid
#
# source://factory_bot//lib/factory_bot/errors.rb#24
class FactoryBot::InvalidFactoryError < ::RuntimeError; end

# source://factory_bot//lib/factory_bot/linter.rb#2
class FactoryBot::Linter
  # @return [Linter] a new instance of Linter
  #
  # source://factory_bot//lib/factory_bot/linter.rb#4
  def initialize(factories, linting_strategy, factory_strategy = T.unsafe(nil)); end

  # source://factory_bot//lib/factory_bot/linter.rb#11
  def lint!; end

  private

  # source://factory_bot//lib/factory_bot/linter.rb#21
  def calculate_invalid_factories; end

  # source://factory_bot//lib/factory_bot/linter.rb#85
  def error_message; end

  # Returns the value of attribute factories_to_lint.
  #
  # source://factory_bot//lib/factory_bot/linter.rb#19
  def factories_to_lint; end

  # Returns the value of attribute factory_strategy.
  #
  # source://factory_bot//lib/factory_bot/linter.rb#19
  def factory_strategy; end

  # Returns the value of attribute invalid_factories.
  #
  # source://factory_bot//lib/factory_bot/linter.rb#19
  def invalid_factories; end

  # source://factory_bot//lib/factory_bot/linter.rb#56
  def lint_factory(factory); end

  # source://factory_bot//lib/factory_bot/linter.rb#79
  def lint_factory_and_traits(factory); end

  # source://factory_bot//lib/factory_bot/linter.rb#66
  def lint_traits(factory); end
end

# source://factory_bot//lib/factory_bot/linter.rb#29
class FactoryBot::Linter::FactoryError
  # @return [FactoryError] a new instance of FactoryError
  #
  # source://factory_bot//lib/factory_bot/linter.rb#30
  def initialize(wrapped_error, factory); end

  # source://factory_bot//lib/factory_bot/linter.rb#40
  def location; end

  # source://factory_bot//lib/factory_bot/linter.rb#35
  def message; end
end

# source://factory_bot//lib/factory_bot/linter.rb#45
class FactoryBot::Linter::FactoryTraitError < ::FactoryBot::Linter::FactoryError
  # @return [FactoryTraitError] a new instance of FactoryTraitError
  #
  # source://factory_bot//lib/factory_bot/linter.rb#46
  def initialize(wrapped_error, factory, trait_name); end

  # source://factory_bot//lib/factory_bot/linter.rb#51
  def location; end
end

# Raised when a method is defined in a factory or trait with arguments
#
# source://factory_bot//lib/factory_bot/errors.rb#21
class FactoryBot::MethodDefinitionError < ::RuntimeError; end

# @api private
#
# source://factory_bot//lib/factory_bot/null_factory.rb#3
class FactoryBot::NullFactory
  # @api private
  # @return [NullFactory] a new instance of NullFactory
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#6
  def initialize; end

  # source://factory_bot//lib/factory_bot/null_factory.rb#10
  def attributes(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/null_factory.rb#10
  def callbacks(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#14
  def class_name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#13
  def compile; end

  # source://factory_bot//lib/factory_bot/null_factory.rb#10
  def constructor(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/null_factory.rb#10
  def defined_traits(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#4
  def definition; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#15
  def evaluator_class; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_factory.rb#16
  def hierarchy_class; end

  # source://factory_bot//lib/factory_bot/null_factory.rb#10
  def to_create(*_arg0, **_arg1, &_arg2); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/null_object.rb#3
class FactoryBot::NullObject < ::BasicObject
  # @api private
  # @return [NullObject] a new instance of NullObject
  #
  # source://factory_bot//lib/factory_bot/null_object.rb#4
  def initialize(methods_to_respond_to); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/null_object.rb#8
  def method_missing(name, *args, &block); end

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/null_object.rb#16
  def respond_to?(method, include_private = T.unsafe(nil)); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/null_object.rb#20
  def respond_to_missing?(*args); end
end

# source://factory_bot//lib/factory_bot/registry.rb#2
class FactoryBot::Registry
  include ::Enumerable

  # @return [Registry] a new instance of Registry
  #
  # source://factory_bot//lib/factory_bot/registry.rb#7
  def initialize(name); end

  # source://factory_bot//lib/factory_bot/registry.rb#20
  def [](name); end

  # source://factory_bot//lib/factory_bot/registry.rb#12
  def clear; end

  # source://factory_bot//lib/factory_bot/registry.rb#16
  def each(&block); end

  # source://factory_bot//lib/factory_bot/registry.rb#20
  def find(name); end

  # Returns the value of attribute name.
  #
  # source://factory_bot//lib/factory_bot/registry.rb#5
  def name; end

  # source://factory_bot//lib/factory_bot/registry.rb#30
  def register(name, item); end

  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/registry.rb#34
  def registered?(name); end
end

# Sequences are defined using sequence within a FactoryBot.define block.
# Sequence values are generated using next.
#
# @api private
#
# source://factory_bot//lib/factory_bot/sequence.rb#6
class FactoryBot::Sequence
  # @api private
  # @return [Sequence] a new instance of Sequence
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#9
  def initialize(name, *args, &proc); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#7
  def name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#34
  def names; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#22
  def next(scope = T.unsafe(nil)); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#38
  def rewind; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#48
  def increment_value; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#44
  def value; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/sequence.rb#52
class FactoryBot::Sequence::EnumeratorAdapter
  # @api private
  # @return [EnumeratorAdapter] a new instance of EnumeratorAdapter
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#53
  def initialize(value); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#62
  def next; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#58
  def peek; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/sequence.rb#66
  def rewind; end
end

# Raised when attempting to register a sequence from a dynamic attribute block
#
# source://factory_bot//lib/factory_bot/errors.rb#12
class FactoryBot::SequenceAbuseError < ::RuntimeError; end

# source://factory_bot//lib/factory_bot/strategy/build.rb#2
module FactoryBot::Strategy; end

# source://factory_bot//lib/factory_bot/strategy/stub.rb#99
module FactoryBot::Strategy::ActiveModelDirtyBackport
  # source://factory_bot//lib/factory_bot/strategy/stub.rb#100
  def clear_changes_information; end
end

# source://factory_bot//lib/factory_bot/strategy/attributes_for.rb#3
class FactoryBot::Strategy::AttributesFor
  # source://factory_bot//lib/factory_bot/strategy/attributes_for.rb#4
  def association(runner); end

  # source://factory_bot//lib/factory_bot/strategy/attributes_for.rb#8
  def result(evaluation); end
end

# source://factory_bot//lib/factory_bot/strategy/build.rb#3
class FactoryBot::Strategy::Build
  # source://factory_bot//lib/factory_bot/strategy/build.rb#4
  def association(runner); end

  # source://factory_bot//lib/factory_bot/strategy/build.rb#8
  def result(evaluation); end
end

# source://factory_bot//lib/factory_bot/strategy/create.rb#3
class FactoryBot::Strategy::Create
  # source://factory_bot//lib/factory_bot/strategy/create.rb#4
  def association(runner); end

  # source://factory_bot//lib/factory_bot/strategy/create.rb#8
  def result(evaluation); end
end

# source://factory_bot//lib/factory_bot/strategy/null.rb#3
class FactoryBot::Strategy::Null
  # source://factory_bot//lib/factory_bot/strategy/null.rb#4
  def association(runner); end

  # source://factory_bot//lib/factory_bot/strategy/null.rb#7
  def result(evaluation); end
end

# source://factory_bot//lib/factory_bot/strategy/stub.rb#3
class FactoryBot::Strategy::Stub
  # source://factory_bot//lib/factory_bot/strategy/stub.rb#27
  def association(runner); end

  # source://factory_bot//lib/factory_bot/strategy/stub.rb#31
  def result(evaluation); end

  private

  # source://factory_bot//lib/factory_bot/strategy/stub.rb#90
  def clear_changed_attributes_on_result(result_instance); end

  # source://factory_bot//lib/factory_bot/strategy/stub.rb#41
  def next_id; end

  # source://factory_bot//lib/factory_bot/strategy/stub.rb#45
  def stub_database_interaction_on_result(result_instance); end
end

# source://factory_bot//lib/factory_bot/strategy/stub.rb#6
FactoryBot::Strategy::Stub::DISABLED_PERSISTENCE_METHODS = T.let(T.unsafe(nil), Array)

# @api private
#
# source://factory_bot//lib/factory_bot/strategy_calculator.rb#3
class FactoryBot::StrategyCalculator
  # @api private
  # @return [StrategyCalculator] a new instance of StrategyCalculator
  #
  # source://factory_bot//lib/factory_bot/strategy_calculator.rb#4
  def initialize(name_or_object); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_calculator.rb#8
  def strategy; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://factory_bot//lib/factory_bot/strategy_calculator.rb#18
  def strategy_is_object?; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_calculator.rb#22
  def strategy_name_to_object; end
end

# @api private
#
# source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#3
class FactoryBot::StrategySyntaxMethodRegistrar
  # @api private
  # @return [StrategySyntaxMethodRegistrar] a new instance of StrategySyntaxMethodRegistrar
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#4
  def initialize(strategy_name); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#8
  def define_strategy_methods; end

  private

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#24
  def define_list_strategy_method; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#36
  def define_pair_strategy_method; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#16
  def define_singular_strategy_method; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#44
  def define_syntax_method(name, &block); end
end

# source://factory_bot//lib/factory_bot/syntax/methods.rb#2
module FactoryBot::Syntax; end

# source://factory_bot//lib/factory_bot/syntax/default.rb#3
module FactoryBot::Syntax::Default
  include ::FactoryBot::Syntax::Methods

  # source://factory_bot//lib/factory_bot/syntax/default.rb#6
  def define(&block); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#10
  def modify(&block); end
end

# source://factory_bot//lib/factory_bot/syntax/default.rb#14
class FactoryBot::Syntax::Default::DSL
  # source://factory_bot//lib/factory_bot/syntax/default.rb#52
  def after(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#52
  def before(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#52
  def callback(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#15
  def factory(name, options = T.unsafe(nil), &block); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#44
  def initialize_with(&block); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#28
  def sequence(name, *args, &block); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#40
  def skip_create; end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#36
  def to_create(&block); end

  # source://factory_bot//lib/factory_bot/syntax/default.rb#32
  def trait(name, &block); end

  private

  # source://factory_bot//lib/factory_bot/syntax/default.rb#56
  def configuration; end

  class << self
    # source://factory_bot//lib/factory_bot/syntax/default.rb#48
    def run(block); end
  end
end

# source://factory_bot//lib/factory_bot/syntax/default.rb#61
class FactoryBot::Syntax::Default::ModifyDSL
  # source://factory_bot//lib/factory_bot/syntax/default.rb#62
  def factory(name, options = T.unsafe(nil), &block); end

  class << self
    # source://factory_bot//lib/factory_bot/syntax/default.rb#68
    def run(block); end
  end
end

# This module is a container for all strategy methods provided by
# FactoryBot. This includes all the default strategies provided ({Methods#build},
# {Methods#create}, {Methods#build_stubbed}, and {Methods#attributes_for}), as well as
# the complementary *_list methods.
#
# @example singular factory execution
#   # basic use case
#   build(:completed_order)
#
#   # factory yielding its result to a block
#   create(:post) do |post|
#   create(:comment, post: post)
#   end
#
#   # factory with attribute override
#   attributes_for(:post, title: "I love Ruby!")
#
#   # factory with traits and attribute override
#   build_stubbed(:user, :admin, :male, name: "John Doe")
# @example multiple factory execution
#   # basic use case
#   build_list(:completed_order, 2)
#   create_list(:completed_order, 2)
#
#   # factory with attribute override
#   attributes_for_list(:post, 4, title: "I love Ruby!")
#
#   # factory with traits and attribute override
#   build_stubbed_list(:user, 15, :admin, :male, name: "John Doe")
#
# source://factory_bot//lib/factory_bot/syntax/methods.rb#32
module FactoryBot::Syntax::Methods
  # (see #strategy_method)
  # Generates a hash of attributes for a registered factory by name.
  #
  # @return [Hash] hash of attributes for the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#19
  def attributes_for(name, *traits_and_overrides, &block); end

  # (see #strategy_method_list)
  #
  # @return [Array<Hash>] array of attribute hashes for the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#27
  def attributes_for_list(name, amount, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#39
  def attributes_for_pair(name, *traits_and_overrides, &block); end

  # (see #strategy_method)
  # Builds a registered factory by name.
  #
  # @return [Object] instantiated object defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#19
  def build(name, *traits_and_overrides, &block); end

  # (see #strategy_method_list)
  #
  # @return [Array] array of built objects defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#27
  def build_list(name, amount, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#39
  def build_pair(name, *traits_and_overrides, &block); end

  # (see #strategy_method)
  # Builds a stubbed registered factory by name.
  #
  # @return [Object] instantiated object defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#19
  def build_stubbed(name, *traits_and_overrides, &block); end

  # (see #strategy_method_list)
  #
  # @return [Array] array of stubbed objects defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#27
  def build_stubbed_list(name, amount, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#39
  def build_stubbed_pair(name, *traits_and_overrides, &block); end

  # (see #strategy_method)
  # Creates a registered factory by name.
  #
  # @return [Object] instantiated object defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#19
  def create(name, *traits_and_overrides, &block); end

  # (see #strategy_method_list)
  #
  # @return [Array] array of created objects defined by the factory
  #
  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#27
  def create_list(name, amount, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#39
  def create_pair(name, *traits_and_overrides, &block); end

  # Generates and returns the next value in a sequence.
  #
  # Arguments:
  #   name: (Symbol)
  #     The name of the sequence that a value should be generated for.
  #
  # Returns:
  #   The next value in the sequence. (Object)
  #
  # source://factory_bot//lib/factory_bot/syntax/methods.rb#90
  def generate(name); end

  # Generates and returns the list of values in a sequence.
  #
  # Arguments:
  #   name: (Symbol)
  #     The name of the sequence that a value should be generated for.
  #   count: (Fixnum)
  #     Count of values
  #
  # Returns:
  #   The next value in the sequence. (Object)
  #
  # source://factory_bot//lib/factory_bot/syntax/methods.rb#104
  def generate_list(name, count); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#19
  def null(name, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#27
  def null_list(name, amount, *traits_and_overrides, &block); end

  # source://factory_bot//lib/factory_bot/strategy_syntax_method_registrar.rb#39
  def null_pair(name, *traits_and_overrides, &block); end
end

# @api private
#
# source://factory_bot//lib/factory_bot/syntax_runner.rb#3
class FactoryBot::SyntaxRunner
  include ::FactoryBot::Syntax::Methods
end

# @api private
#
# source://factory_bot//lib/factory_bot/trait.rb#3
class FactoryBot::Trait
  # @api private
  # @return [Trait] a new instance of Trait
  #
  # source://factory_bot//lib/factory_bot/trait.rb#6
  def initialize(name, &block); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/trait.rb#22
  def ==(other); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def add_callback(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def attributes(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def callbacks(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def constructor(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def declare_attribute(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def define_trait(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/trait.rb#4
  def definition; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/trait.rb#4
  def name; end

  # @api private
  #
  # source://factory_bot//lib/factory_bot/trait.rb#18
  def names; end

  # source://factory_bot//lib/factory_bot/trait.rb#15
  def to_create(*_arg0, **_arg1, &_arg2); end

  protected

  # @api private
  #
  # source://factory_bot//lib/factory_bot/trait.rb#28
  def block; end
end

# source://factory_bot//lib/factory_bot/version.rb#2
FactoryBot::VERSION = T.let(T.unsafe(nil), String)
